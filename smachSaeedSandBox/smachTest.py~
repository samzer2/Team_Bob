#!/usr/bin/env python

import roslib; roslib.load_manifest('smach_tutorials')
import rospy
import smach
import smach_ros

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

class Navigate (smach.State):
    def __init__(self, outcomes=['success', 'failure']):
        smach.State.__init__(self, outcomes=['success', 'failure'])
        self.counter = 0
    def execute(self, userdata=None):
        rospy.loginfo('Executing state \'Navigation\'')
        if self.counter < 10:
            self.counter += 1
            return 'success'
        else:
            return 'failure'

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

class DetectPerson (smach.State):
    def __init__(self, outcomes=['success', 'failure']):
        smach.State.__init__(self, outcomes=['success', 'failure'])
    def execute(self, userdata=None):
        rospy.loginfo('Executing state \'Detection\'')
        if True:
            return 'success'
        else:
            return 'failure'

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

class ApproachPerson (smach.State):
    def __init__(self, outcomes=['success', 'failure']):
        smach.State.__init__(self, outcomes=['success', 'failure'])
    def execute(self, userdata=None):
        rospy.loginfo('Executing state \'Approach\'')
        if True:
            return 'success'
        else:
            return 'failure'

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

class Interact (smach.State):
    def __init__(self, outcomes=['success', 'failure']):
        smach.State.__init__(self, outcomes=['success', 'failure'])        
    def execute(self, userdata=None):
        rospy.loginfo('Executing state \'Interact\'')
        if True:
            return 'success'
        else:
            return 'failure'

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
def main():
    rospy.init_node('smach_example_state_machine')

    # Create a SMACH state machine
    sm = smach.StateMachine(outcomes=['success', 'failure'])

    # Open the container
    with sm:
        # Add states to the container
        smach.StateMachine.add('Navigate', Navigate(), 
                               transitions={'success':'DetectPerson', 
                                            'failure':'Navigate'})

        smach.StateMachine.add('DetectPerson', DetectPerson(), 
                               transitions={'success':'ApproachPerson',
                                            'failure':'Navigate'})

        smach.StateMachine.add('ApproachPerson', ApproachPerson(),  
                               transitions={'success':'Interact',
                                            'failure':'Navigate'})

        smach.StateMachine.add('Interact', Interact(),   
                               transitions={'success':'Navigate',
                                            'failure':'Navigate'})

    # Execute SMACH plan
    outcome = sm.execute()


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
if __name__ == '__main__':
    main()
